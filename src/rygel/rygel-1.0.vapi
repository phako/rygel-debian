/* rygel-1.0.vapi generated by valac, do not modify. */

[CCode (cprefix = "Gst", lower_case_cprefix = "gst_")]
namespace Gst {
}
[CCode (cprefix = "Rygel", lower_case_cprefix = "rygel_")]
namespace Rygel {
	[CCode (cheader_filename = "rygel.h")]
	public class CmdlineConfig : GLib.Object, Rygel.Configuration {
		public CmdlineConfig ();
		public static Rygel.CmdlineConfig get_default ();
		public static void parse_args (ref unowned string[] args) throws Rygel.CmdlineConfigError, GLib.OptionError;
	}
	[CCode (cheader_filename = "rygel.h")]
	public class ConnectionManager : GUPnP.Service {
		protected string connection_ids;
		protected string sink_protocol_info;
		protected string source_protocol_info;
		public const string DESCRIPTION_PATH;
		public const string UPNP_ID;
		public const string UPNP_TYPE;
		public ConnectionManager ();
		public override void constructed ();
	}
	[CCode (cheader_filename = "rygel.h")]
	public class ContentDirectory : GUPnP.Service {
		protected string feature_list;
		public Rygel.MediaContainer root_container;
		protected string search_caps;
		protected string sort_caps;
		public uint32 system_update_id;
		public const string DESCRIPTION_PATH;
		public const string UPNP_ID;
		public const string UPNP_TYPE;
		public ContentDirectory ();
		public override void constructed ();
		public virtual Rygel.MediaContainer? create_root_container ();
	}
	[CCode (cheader_filename = "rygel.h")]
	[DBus (name = "org.gnome.Rygel1")]
	public class DBusService : GLib.Object {
		public DBusService (Rygel.Main main) throws DBus.Error;
		public void Shutdown ();
	}
	[CCode (ref_function = "rygel_icon_info_ref", unref_function = "rygel_icon_info_unref", cheader_filename = "rygel.h")]
	public class IconInfo {
		public int depth;
		public int height;
		public string mime_type;
		public long size;
		public string uri;
		public int width;
		public IconInfo (string mime_type);
	}
	[CCode (cheader_filename = "rygel.h")]
	public class LogHandler : GLib.Object {
		public GLib.LogLevelFlags levels;
		public static Rygel.LogHandler get_default ();
	}
	[CCode (cheader_filename = "rygel.h")]
	public class Main : GLib.Object {
		public void exit (int exit_code);
	}
	[CCode (cheader_filename = "rygel.h")]
	public abstract class MediaContainer : Rygel.MediaObject {
		public uint child_count;
		public uint32 update_id;
		public MediaContainer (string id, Rygel.MediaContainer? parent, string title, uint child_count);
		public abstract async Rygel.MediaObject? find_object (string id, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async Gee.List<Rygel.MediaObject>? get_children (uint offset, uint max_count, GLib.Cancellable? cancellable) throws GLib.Error;
		public MediaContainer.root (string title, uint child_count);
		public void updated ();
		public signal void container_updated (Rygel.MediaContainer container);
	}
	[CCode (cheader_filename = "rygel.h")]
	public class MediaDB : GLib.Object {
		public static Rygel.MediaDB? create (string name) throws Rygel.MediaDBError;
		public static Rygel.MediaDB? create_with_factory (string name, Rygel.MediaDBObjectFactory factory) throws Rygel.MediaDBError;
		public bool exists (string object_id, out int64 timestamp) throws Rygel.DatabaseError;
		public int get_child_count (string container_id) throws Rygel.DatabaseError;
		public Gee.ArrayList<string> get_child_ids (string container_id) throws Rygel.DatabaseError;
		public Gee.ArrayList<Rygel.MediaObject> get_children (string container_id, long offset, long max_count) throws GLib.Error;
		public Rygel.MediaContainer? get_container (string container_id) throws Rygel.DatabaseError, Rygel.MediaDBError;
		public Rygel.MediaItem? get_item (string item_id) throws Rygel.DatabaseError, Rygel.MediaDBError;
		public Rygel.MediaObject? get_object (string object_id) throws Rygel.DatabaseError;
		public void remove_by_id (string id) throws Rygel.DatabaseError;
		public void remove_object (Rygel.MediaObject obj) throws Rygel.DatabaseError, Rygel.MediaDBError;
		public void save_container (Rygel.MediaContainer container) throws GLib.Error;
		public void save_item (Rygel.MediaItem item) throws GLib.Error;
		public void save_object (Rygel.MediaObject obj) throws GLib.Error;
		public void update_object (Rygel.MediaObject obj) throws GLib.Error;
		public signal void container_added (string container_id);
		public signal void container_removed (string container_id);
		public signal void container_updated (string container_id);
		public signal void item_added (string item_id);
		public signal void item_removed (string item_id);
		public signal void item_updated (string item_id);
		public signal void object_added (string object_id);
		public signal void object_removed (string object_id);
		public signal void object_updated (string object_id);
	}
	[CCode (cheader_filename = "rygel.h")]
	public class MediaDBContainer : Rygel.MediaContainer {
		protected Rygel.MediaDB media_db;
		public MediaDBContainer (Rygel.MediaDB media_db, string id, string title);
		public override async Rygel.MediaObject? find_object (string id, GLib.Cancellable? cancellable) throws GLib.Error;
		public override async Gee.List<Rygel.MediaObject>? get_children (uint offset, uint max_count, GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "rygel.h")]
	public class MediaDBObjectFactory : GLib.Object {
		public MediaDBObjectFactory ();
		public virtual Rygel.MediaContainer get_container (Rygel.MediaDB media_db, string id, string title, uint child_count);
		public virtual Rygel.MediaItem get_item (Rygel.MediaDB media_db, Rygel.MediaContainer parent, string id, string title, string upnp_class);
	}
	[CCode (cheader_filename = "rygel.h")]
	public class MediaItem : Rygel.MediaObject {
		public string album;
		public string author;
		public int bitrate;
		public int bits_per_sample;
		public int color_depth;
		public string date;
		public string dlna_profile;
		public long duration;
		public int height;
		public string mime_type;
		public int n_audio_channels;
		public int pixel_height;
		public int pixel_width;
		public int sample_freq;
		public long size;
		public Gee.ArrayList<Rygel.Thumbnail> thumbnails;
		public int track_number;
		public string upnp_class;
		public int width;
		public const string AUDIO_CLASS;
		public const string IMAGE_CLASS;
		public const string MUSIC_CLASS;
		public const string VIDEO_CLASS;
		public MediaItem (string id, Rygel.MediaContainer parent, string title, string upnp_class);
		public void add_uri (string uri, Rygel.Thumbnail? thumbnail);
		public virtual Gst.Element? create_stream_source ();
		public virtual bool should_stream ();
	}
	[CCode (cheader_filename = "rygel.h")]
	public abstract class MediaObject : GLib.Object {
		public string id;
		public uint64 modified;
		public weak Rygel.MediaContainer parent;
		public Rygel.MediaContainer parent_ref;
		public Gee.ArrayList<string> uris;
		public MediaObject ();
		public string title { get; set; }
	}
	[CCode (cheader_filename = "rygel.h")]
	public class MetaConfig : GLib.Object, Rygel.Configuration {
		public MetaConfig ();
		public static Rygel.MetaConfig get_default ();
	}
	[CCode (cheader_filename = "rygel.h")]
	public class MetadataExtractor : GLib.Object {
		public const string TAG_RYGEL_CHANNELS;
		public const string TAG_RYGEL_DEPTH;
		public const string TAG_RYGEL_DURATION;
		public const string TAG_RYGEL_HEIGHT;
		public const string TAG_RYGEL_MIME;
		public const string TAG_RYGEL_MTIME;
		public const string TAG_RYGEL_RATE;
		public const string TAG_RYGEL_SIZE;
		public const string TAG_RYGEL_WIDTH;
		public static Rygel.MetadataExtractor? create ();
		public void extract (GLib.File file);
		public signal void error (GLib.File file, GLib.Error err);
		public signal void extraction_done (GLib.File file, Gst.TagList tag_list);
	}
	[CCode (cheader_filename = "rygel.h")]
	public class Plugin : GUPnP.ResourceFactory {
		public string desc_path;
		public Gee.ArrayList<Rygel.IconInfo> icon_infos;
		public string name;
		public Gee.ArrayList<Rygel.ResourceInfo> resource_infos;
		public string title;
		public Plugin (string desc_path, string name, string? title);
		public Plugin.MediaServer (string name, string? title, GLib.Type content_dir_type);
		public void add_icon (Rygel.IconInfo icon_info);
		public void add_resource (Rygel.ResourceInfo resource_info);
		public bool available { get; set; }
	}
	[CCode (cheader_filename = "rygel.h")]
	public class PluginLoader : GLib.Object {
		public PluginLoader ();
		public void add_plugin (Rygel.Plugin plugin);
		public Rygel.Plugin? get_plugin_by_name (string name);
		public Gee.Collection<Rygel.Plugin> list_plugins ();
		public void load_plugins ();
		public signal void plugin_available (Rygel.Plugin plugin);
	}
	[CCode (ref_function = "rygel_resource_info_ref", unref_function = "rygel_resource_info_unref", cheader_filename = "rygel.h")]
	public class ResourceInfo {
		public string description_path;
		public GLib.Type type;
		public string upnp_id;
		public string upnp_type;
		public ResourceInfo (string upnp_id, string upnp_type, string description_path, GLib.Type type);
	}
	[CCode (cheader_filename = "rygel.h")]
	public class RootDevice : GUPnP.RootDevice {
		public RootDevice (GUPnP.Context context, Rygel.Plugin plugin, GUPnP.XMLDoc description_doc, string description_path, string description_dir);
	}
	[CCode (ref_function = "rygel_root_device_factory_ref", unref_function = "rygel_root_device_factory_unref", cheader_filename = "rygel.h")]
	public class RootDeviceFactory {
		public GUPnP.Context context;
		public RootDeviceFactory (GUPnP.Context context) throws GLib.Error;
		public Rygel.RootDevice create (Rygel.Plugin plugin) throws GLib.Error;
	}
	[CCode (cheader_filename = "rygel.h")]
	public class SimpleContainer : Rygel.MediaContainer {
		public Gee.ArrayList<Rygel.MediaObject> children;
		public SimpleContainer (string id, Rygel.MediaContainer? parent, string title);
		public void add_child (Rygel.MediaObject child);
		public override async Rygel.MediaObject? find_object (string id, GLib.Cancellable? cancellable) throws GLib.Error;
		public async Rygel.MediaObject? find_object_in_children (string id, GLib.Cancellable? cancellable) throws GLib.Error;
		public override async Gee.List<Rygel.MediaObject>? get_children (uint offset, uint max_count, GLib.Cancellable? cancellable) throws GLib.Error;
		public void remove_child (Rygel.MediaObject child);
		public SimpleContainer.root (string title);
	}
	[CCode (cheader_filename = "rygel.h")]
	public class SourceConnectionManager : Rygel.ConnectionManager {
		public SourceConnectionManager ();
		public override void constructed ();
	}
	[CCode (cheader_filename = "rygel.h")]
	public class Thumbnail : Rygel.IconInfo {
		public string dlna_profile;
		public Thumbnail (string mime_type = "image/jpeg", string dlna_profile = "JPEG_TN");
	}
	[CCode (cheader_filename = "rygel.h")]
	public class UserConfig : GLib.Object, Rygel.Configuration {
		protected GLib.KeyFile key_file;
		protected const string CONFIG_FILE;
		protected const string ENABLED_KEY;
		protected const string IFACE_KEY;
		protected const string LOG_LEVEL_KEY;
		protected const string LPCM_TRANSCODER_KEY;
		protected const string MP2TS_TRANSCODER_KEY;
		protected const string MP3_TRANSCODER_KEY;
		protected const string PORT_KEY;
		protected const string TITLE_KEY;
		protected const string TRANSCODING_KEY;
		public UserConfig (bool read_only = true) throws GLib.Error;
		public static Rygel.UserConfig get_default () throws GLib.Error;
		public void save ();
		public void set_bool (string section, string key, bool value);
		public void set_int (string section, string key, int value);
		public void set_interface (string value);
		public void set_lpcm_transcoder (bool value);
		public void set_mp2ts_transcoder (bool value);
		public void set_mp3_transcoder (bool value);
		public void set_port (int value);
		public void set_string (string section, string key, string value);
		public void set_string_list (string section, string key, Gee.ArrayList<string> str_list);
		public void set_transcoding (bool value);
		public void set_upnp_enabled (bool value);
	}
	[CCode (cheader_filename = "rygel.h")]
	public interface Configuration : GLib.Object {
		public abstract bool get_bool (string section, string key) throws GLib.Error;
		public abstract bool get_enabled (string section) throws GLib.Error;
		public abstract int get_int (string section, string key, int min, int max) throws GLib.Error;
		public abstract Gee.ArrayList<int> get_int_list (string section, string key) throws GLib.Error;
		public abstract string get_interface () throws GLib.Error;
		public abstract Rygel.LogLevel get_log_level () throws GLib.Error;
		public abstract bool get_lpcm_transcoder () throws GLib.Error;
		public abstract bool get_mp2ts_transcoder () throws GLib.Error;
		public abstract bool get_mp3_transcoder () throws GLib.Error;
		public abstract int get_port () throws GLib.Error;
		public abstract string get_string (string section, string key) throws GLib.Error;
		public abstract Gee.ArrayList<string> get_string_list (string section, string key) throws GLib.Error;
		public abstract string get_title (string section) throws GLib.Error;
		public abstract bool get_transcoding () throws GLib.Error;
		public abstract bool get_upnp_enabled () throws GLib.Error;
	}
	[CCode (cheader_filename = "rygel.h")]
	public interface StateMachine : GLib.Object {
		public abstract async void run ();
		public abstract GLib.Cancellable cancellable { get; set; }
		public signal void completed ();
	}
	[CCode (cprefix = "RYGEL_LOG_LEVEL_", cheader_filename = "rygel.h")]
	public enum LogLevel {
		INVALID,
		CRITICAL,
		ERROR,
		WARNING,
		INFO,
		DEFAULT,
		DEBUG
	}
	[CCode (cprefix = "RYGEL_MEDIA_DB_OBJECT_TYPE_", cheader_filename = "rygel.h")]
	public enum MediaDBObjectType {
		CONTAINER,
		ITEM
	}
	[CCode (cprefix = "RYGEL_CMDLINE_CONFIG_ERROR_", cheader_filename = "rygel.h")]
	public errordomain CmdlineConfigError {
		VERSION_ONLY,
	}
	[CCode (cprefix = "RYGEL_CONFIGURATION_ERROR_", cheader_filename = "rygel.h")]
	public errordomain ConfigurationError {
		NO_VALUE_SET,
		VALUE_OUT_OF_RANGE,
	}
	[CCode (cprefix = "RYGEL_CONTENT_DIRECTORY_ERROR_", cheader_filename = "rygel.h")]
	public errordomain ContentDirectoryError {
		NO_SUCH_OBJECT,
		INVALID_ARGS,
	}
	[CCode (cprefix = "RYGEL_DATABASE_ERROR_", cheader_filename = "rygel.h")]
	public errordomain DatabaseError {
		SQLITE_ERROR,
	}
	[CCode (cprefix = "RYGEL_MEDIA_DB_ERROR_", cheader_filename = "rygel.h")]
	public errordomain MediaDBError {
		SQLITE_ERROR,
		GENERAL_ERROR,
		INVALID_TYPE,
	}
}
[CCode (cprefix = "ROOT_DEVICE_FACTORY_ERROR_", cheader_filename = "rygel.h")]
public errordomain RootDeviceFactoryError {
	XML_PARSE,
}
